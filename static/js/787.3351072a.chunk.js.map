{"version":3,"file":"static/js/787.3351072a.chunk.js","mappings":"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","sources":["components/FormValidation/FormValidation.styled.js","components/FormValidation/FormValidation.jsx","components/LoginForm/LoginForm.styled.js","components/RegisterForm/NavigationForm/NavigationForm.styled.js","components/RegisterForm/NavigationForm/NavigationForm.jsx","components/RegisterForm/MultiForm/MultiForm.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst Error = styled.div`\n  position: absolute;\n  width: 100%;\n  text-align: center;\n  left: 50%;\n  top: 45px;\n  transform: translateX(-50%);\n  font-size: 10px;\n  color: red;\n`;\n\nexport { Error };\n","import * as yup from 'yup';\nimport { ErrorMessage } from 'formik';\nimport { Error } from './FormValidation.styled';\n\nconst emailValid =\n  /^[^-._]{1}[A-Za-z0-9._-]{1,}@[^-._]{1}[A-Za-z0-9.-]{0,}\\.[A-Za-z]{2,4}$/;\nconst nameValid = /^[a-zA-zа-яіїєА-ЯІЇЄ ]+$/;\nconst passwordValid = /^[^ ]{7,32}$/;\nconst phoneValid = /^[+]{1}[0-9]{12}$/;\nconst locationValid = /^[a-zA-Zа-яіїєА-ЯІЇЄ]+[,][ ][a-zA-Zа-яіїєА-ЯІЇЄ]+$/;\n\nconst validationLogin = yup.object().shape({\n  email: yup\n    .string()\n    .required('Email field is required')\n    .matches(emailValid, \"Email must contain '@', example: user@mail.com \")\n    .email(),\n  password: yup\n    .string()\n    .matches(passwordValid, 'Please enter min 7 characters and max 32')\n    .max(32, 'Please enter 32 characters or less')\n    .min(7, 'Enter 7 or more characters')\n    .required('Password field is required'),\n});\n\nconst validationRegisterStepOne = yup.object().shape({\n  email: yup\n    .string()\n    .required('Email field is required')\n    .matches(emailValid, \"Email must contain '@', example: user@mail.com \")\n    .email(),\n  password: yup\n    .string()\n    .matches(passwordValid, 'Please enter min 7 characters and max 32')\n    .max(32, 'Please enter 32 characters or less')\n    .min(7, 'Enter 7 or more characters')\n    .required('Password field is required'),\n  confirm_password: yup.string().when('password', {\n    is: val => (val && val.length > 0 ? true : false),\n    then: () =>\n      yup\n        .string()\n        .oneOf([yup.ref('password')], ' Please confirm your password'),\n  }),\n});\n\nconst validationRegisterStepTwo = yup.object().shape({\n  name: yup\n    .string()\n    .required('Name field is required')\n    .matches(nameValid, 'Name field can contain any letters'),\n  location: yup\n    .string()\n    .matches(\n      locationValid,\n      'Location field must contain two words separated by a comma'\n    )\n    .required('Location field is required'),\n  phone: yup\n    .string()\n    .matches(phoneValid, 'The phone number must be in the format +380123456789')\n    .required('Phone number field is required'),\n});\n\nconst InputError = ({ name }) => {\n  return (\n    <Error>\n      <ErrorMessage\n        name={name}\n        render={message => <p style={{ margin: 0 }}>{message}</p>}\n      />\n    </Error>\n  );\n};\n\nexport {\n  validationLogin,\n  InputError,\n  validationRegisterStepOne,\n  validationRegisterStepTwo,\n};\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { theme } from '../../theme';\n\n// import BgImage from \"./img/bgMobile.svg\"\n//  background-image: url(${BgImage});\n\nconst Title = styled.h2`\n  text-align: center;\n  color: ${theme.colors.black};\n  font-family: ${theme.fonts.manrope};\n  font-size: ${theme.fontSizes[4] + `px`};\n  line-height: ${theme.lineHeights[4]};\n  font-weight: ${theme.fontWeights.bold};\n  letter-spacing: 0.04em;\n  margin-bottom: 40px;\n`;\nconst Wrapper = styled.div`\n  padding: 0 20px;\n\n  /* background-repeat: no-repeat;\n  background-position: center bottom;\n  background-size: contain; */\n`;\n\nconst FormAuth = styled(Form)`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Label = styled.label`\n  position: relative;\n  margin-bottom: 24px;\n`;\nconst Input = styled(Field)`\n  padding: 0 14px;\n  min-width: 100%;\n  height: 40px;\n  border: ${theme.borders.normal} ${theme.colors.borderActive};\n  font-family: ${theme.fonts.manrope};\n  font-weight: ${theme.fontWeights.normal};\n  color: ${theme.colors.grey};\n  border-radius: ${theme.radii.normal};\n`;\n\nconst IconShow = styled.span`\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 10px;\n  color: ${theme.colors.grey};\n`;\n\nconst BtnFormSubmit = styled.button`\n  display: flex;\n  height: 44px;\n  border-radius: ${theme.radii.normal};\n  margin-top: 16px;\n  font-size: ${theme.fontSizes[3] + `px`};\n  line-height: ${theme.lineHeights[2]};\n  margin-bottom: 40px;\n  color: ${theme.colors.white};\n  font-family: ${theme.fonts.manrope};\n  font-weight: ${theme.fontWeights.medium};\n  justify-content: center;\n  align-items: center;\n  border: ${theme.borders.medium} ${theme.colors.borderActive};\n  background-color: ${theme.colors.accent};\n`;\n\nconst TextLink = styled.p`\n  color: ${theme.colors.grey};\n  font-family: ${theme.fonts.manrope};\n  font-weight: ${theme.fontWeights.normal};\n  text-align: center;\n  font-size: ${theme.fontSizes[0] + `px`};\n  line-height: ${theme.lineHeights[2]};\n  letter-spacing: 0.04em;\n  margin: 0;\n`;\n\nconst LinkToRegister = styled(Link)`\n  color: ${theme.colors.blueLinks};\n  text-decoration: underline;\n`;\nexport {\n  Wrapper,\n  Title,\n  FormAuth,\n  Label,\n  Input,\n  IconShow,\n  BtnFormSubmit,\n  TextLink,\n  LinkToRegister,\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { theme } from '../../../theme';\nimport { BtnFormSubmit } from 'components/LoginForm/LoginForm.styled';\n\nconst ButtonBack = styled(BtnFormSubmit)`\n  width: 100%;\n  margin: 12px 0 40px 0;\n  color: ${theme.colors.black};\n  background-color: transparent;\n`;\n\nconst LinkToLogin = styled(NavLink)`\n  color: ${theme.colors.blueLinks};\n  text-decoration: underline;\n`;\n\nexport { ButtonBack, LinkToLogin };\n","import { ButtonBack, LinkToLogin } from './NavigationForm.styled';\nimport { BtnFormSubmit, TextLink } from 'components/LoginForm/LoginForm.styled';\n\nconst FormNavigation = props => {\n  return (\n    <>\n      <BtnFormSubmit\n        style={{ marginTop: 2, marginBottom: props.isLastStep ? 0 : 40 }}\n        type=\"submit\"\n        name=\"register\"\n      >\n        {props.isLastStep ? 'Register' : 'Next'}\n      </BtnFormSubmit>\n\n      {props.hasPrevious && (\n        <ButtonBack type=\"button\" name=\"back\" onClick={props.onBackClick}>\n          Back\n        </ButtonBack>\n      )}\n\n      <TextLink>\n        <span>Already have an account? </span>\n        <LinkToLogin to=\"/login\">Login</LinkToLogin>\n      </TextLink>\n    </>\n  );\n};\n\nexport default FormNavigation;\n","import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport { FormAuth } from 'components/LoginForm/LoginForm.styled';\nimport FormNavigation from '../NavigationForm';\n\nconst MultiStepForm = ({ children, initialValues, onSubmit }) => {\n  const [stepNumber, setStepNumber] = useState(0);\n  const steps = React.Children.toArray(children);\n\n  const [snapshot, setSnapshot] = useState(initialValues);\n\n  const step = steps[stepNumber];\n  const totalSteps = steps.length;\n  const isLastStep = stepNumber === totalSteps - 1;\n\n  const next = values => {\n    setSnapshot(values);\n    setStepNumber(stepNumber + 1);\n  };\n\n  const previous = values => {\n    setSnapshot(values);\n    setStepNumber(stepNumber - 1);\n  };\n\n  const handleSubmit = async (values, actions) => {\n    if (step.props.onSubmit) {\n      await step.props.onSubmit(values);\n    }\n\n    if (isLastStep) {\n      return onSubmit(values, actions);\n    } else {\n      actions.setTouched({});\n      next(values);\n    }\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={snapshot}\n        onSubmit={handleSubmit}\n        validationSchema={step.props.validationSchema}\n      >\n        {formik => (\n          <FormAuth onSubmit={formik.handleSubmit}>\n            {step}\n\n            <FormNavigation\n              isLastStep={isLastStep}\n              hasPrevious={stepNumber > 0}\n              onBackClick={() => previous(formik.values)}\n            />\n          </FormAuth>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nconst FormStep = ({ stepName = '', children }) => children;\n\nexport { MultiStepForm, FormStep };\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport {\n  validationRegisterStepOne,\n  validationRegisterStepTwo,\n  InputError,\n} from 'components/FormValidation';\nimport { MultiStepForm, FormStep } from './MultiForm';\nimport { BiShow, BiHide } from 'react-icons/bi';\n\nimport {\n  Wrapper,\n  Title,\n  Label,\n  Input,\n  IconShow,\n} from 'components/LoginForm/LoginForm.styled';\n\nconst RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const initialValues = {\n    email: '',\n    password: '',\n    confirm_password: '',\n    name: '',\n    location: '',\n    phone: '',\n  };\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    const {email, password, confirm_password, name, location, phone} = values;\n    if(password===confirm_password) {\n      dispatch(\n        register({\n          email: email,\n          password: password,\n          name: name,\n          location: location,\n          phone: phone\n        })\n      )\n    }\n    console.log(values);\n    actions.resetForm();\n  };\n\n  const togglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const toggleConfirmPassword = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  return (\n    <Wrapper>\n      <Title>Registration</Title>\n      <MultiStepForm initialValues={initialValues} onSubmit={handleSubmit}>\n        <FormStep\n          stepName=\"UserMain\"\n          validationSchema={validationRegisterStepOne}\n        >\n          <Label>\n            <Input\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"email\"\n              placeholder=\"Email\"\n            />\n            <InputError name=\"email\" />\n          </Label>\n          <Label>\n            <Input\n              type={showPassword ? 'text' : 'password'}\n              name=\"password\"\n              placeholder=\"Password\"\n              autoComplete=\"off\"\n            />\n            <IconShow onClick={togglePassword}>\n              {showPassword ? <BiHide size={24} /> : <BiShow size={24} />}\n            </IconShow>\n            <InputError name=\"password\" />\n          </Label>\n          <Label>\n            <Input\n              type={showConfirmPassword ? 'text' : 'password'}\n              name=\"confirm_password\"\n              placeholder=\"Confirm Password\"\n              autoComplete=\"off\"\n            />\n            <IconShow onClick={toggleConfirmPassword}>\n              {showConfirmPassword ? (\n                <BiHide size={24} />\n              ) : (\n                <BiShow size={24} />\n              )}\n            </IconShow>\n            <InputError name=\"confirm_password\" />\n          </Label>\n        </FormStep>\n\n        <FormStep\n          stepName=\"UserLocation\"\n          validationSchema={validationRegisterStepTwo}\n        >\n          <Label>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Name\"\n              autoComplete=\"off\"\n            />\n            <InputError name=\"name\" />\n          </Label>\n          <Label>\n            <Input\n              type=\"text\"\n              name=\"location\"\n              placeholder=\"City, region\"\n              autoComplete=\"off\"\n            />\n            <InputError name=\"location\" />\n          </Label>\n          <Label>\n            <Input\n              type=\"text\"\n              name=\"phone\"\n              placeholder=\"Mobile phone\"\n              autoComplete=\"off\"\n            />\n            <InputError name=\"phone\" />\n          </Label>\n        </FormStep>\n      </MultiStepForm>\n    </Wrapper>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from \"components/RegisterForm\";\n\nconst RegisterPage = () => {\n  return (\n    <RegisterForm/>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["Error","styled","emailValid","passwordValid","validationLogin","yup","shape","email","required","matches","password","max","min","validationRegisterStepOne","confirm_password","when","is","val","length","then","oneOf","validationRegisterStepTwo","name","location","phone","InputError","render","message","style","margin","Title","theme","Wrapper","FormAuth","Form","Label","Input","Field","IconShow","BtnFormSubmit","TextLink","LinkToRegister","Link","ButtonBack","LinkToLogin","NavLink","props","marginTop","marginBottom","isLastStep","type","hasPrevious","onClick","onBackClick","to","MultiStepForm","children","initialValues","onSubmit","useState","stepNumber","setStepNumber","steps","React","snapshot","setSnapshot","step","totalSteps","next","values","handleSubmit","actions","setTouched","validationSchema","formik","FormStep","stepName","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","dispatch","useDispatch","register","console","log","resetForm","autoComplete","placeholder","size"],"sourceRoot":""}