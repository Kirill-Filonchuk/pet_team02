{"version":3,"file":"static/js/447.f6a0325a.chunk.js","mappings":"kTAiIA,EAnGkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,KAAdD,UACR,GAAwCE,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAOMC,EAAiB,WACrBD,GAAiBD,EAClB,EAsBD,OACE,SAAC,KAAD,WACE,SAACG,EAAA,EAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAgBC,WAAYC,EAAAA,MAC5B,SAAC,KAAD,qBACA,SAAC,KAAD,CACEC,cApCY,CACpBC,MAAO,GACPC,SAAU,IAmCFC,iBAAkBC,EAAAA,GAClBC,SA9BW,SAACC,EAAQC,GAC5B,IAAQN,EAAoBK,EAApBL,MAAOC,EAAaI,EAAbJ,SACfb,GACEmB,EAAAA,EAAAA,IAAM,CACJP,MAAOA,EACPC,SAAUA,KAEZO,MAAK,SAAAC,GAEoB,MAArBA,EAAIC,QAAQC,OACdzB,EAAS,QAAS,CAAE0B,SAAS,IAC7BN,EAAQO,aAEU,wCAAhBJ,EAAIC,UACNI,EAAAA,EAAAA,GAAY,kBAEM,wCAAhBL,EAAIC,UACNI,EAAAA,EAAAA,GAAY,4BAEf,GACF,EAOO,SAKG,SAAAC,GAAM,OACL,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,UAAYD,EAAOE,OAAOjB,OAAiC,KAAxBe,EAAOV,OAAOL,MAA2Be,EAAOE,OAAOjB,OAAiC,KAAxBe,EAAOV,OAAOL,MAAe,QAAU,UAA1E,UAChEkB,KAAK,QACLC,KAAK,OACLC,YAAY,QACZC,aAAa,QAEbN,EAAOE,OAAOjB,OAAiC,KAAxBe,EAAOV,OAAOL,MAGrC,MAFA,SAAC,KAAD,CAAckB,KAAK,sBAIrB,SAAC,KAAD,CAAYA,KAAK,cAEnB,UAAC,KAAD,YACE,SAAC,KAAD,CACDF,UAAYD,EAAOE,OAAOhB,UAAuC,KAA3Bc,EAAOV,OAAOJ,SAA8Bc,EAAOE,OAAOhB,UAAuC,KAA3Bc,EAAOV,OAAOJ,SAAkB,QAAU,UAAhF,UACnEiB,KAAK,WACLC,KAAM1B,EAAe,OAAS,WAC9B2B,YAAY,WACZC,aAAa,SAEf,SAAC,KAAD,CAAUC,QAAS3B,EAAnB,SACGF,GAAe,SAAC,MAAD,KAAa,SAAC,MAAD,MAE7BsB,EAAOE,OAAOhB,UAAuC,KAA3Bc,EAAOV,OAAOJ,SAGxC,MAFA,SAAC,KAAD,CAAciB,KAAK,yBAIrB,SAAC,KAAD,CAAYA,KAAK,gBAElB5B,GACC,SAACiC,EAAA,EAAD,KAEA,SAAC,KAAD,CAAeC,SAAUT,EAAOE,OAAOjB,OAASe,EAAOE,OAAOhB,SAAUkB,KAAK,SAA7E,qBAtCC,KA2CT,UAAC,KAAD,YACE,uDACA,SAAC,KAAD,CAAgBM,GAAG,YAAnB,+BAMX,ECrHD,EARkB,WAChB,OACE,0BACA,SAAC,EAAD,KAGH,C","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { ToastContainer, Slide } from 'react-toastify';\nimport { logIn } from 'redux/auth/operations';\nimport useAuth from '../../hooks/useAuth/useAuth';\nimport {\n  validationLogin,\n  InputError,\n  InputCorrect,\n} from 'components/FormValidation';\nimport { notifyError } from 'components/Helpers/Toastify';\nimport Spinner from 'components/Helpers/Spinner';\nimport { BiShow, BiHide } from 'react-icons/bi';\n\nimport Container from 'components/Container';\nimport {\n  Section,\n  Title,\n  FormAuth,\n  Label,\n  Input,\n  IconShow,\n  BtnFormSubmit,\n  TextLink,\n  LinkToRegister,\n  Wrapper,\n} from './LoginForm.styled';\n\nconst LoginForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { isPending } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const togglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n  const handleSubmit = (values, actions) => {\n    const { email, password } = values;\n    dispatch(\n      logIn({\n        email: email,\n        password: password,\n      })\n    ).then(res => {\n      \n      if (res.payload.code === 200) {\n        navigate('/user', { replace: true });\n        actions.resetForm();\n      }\n      if (res.payload === 'Request failed with status code 409') {\n        notifyError('User not found');\n      }\n      if (res.payload === 'Request failed with status code 401') {\n        notifyError('Invalid email or password');\n      }\n    });\n  };\n  return (\n    <Section>\n      <Container>\n        <Wrapper>\n          <ToastContainer transition={Slide} />\n          <Title>Login</Title>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={validationLogin}\n            onSubmit={handleSubmit}\n          >\n            {formik => (\n              <FormAuth>\n                <Label>\n                  <Input\n                    className={!formik.errors.email && formik.values.email !== '' ? 'success' : formik.errors.email && formik.values.email !== '' ? 'error' : 'default'}\n                    name=\"email\"\n                    type=\"text\"\n                    placeholder=\"Email\"\n                    autoComplete=\"off\"\n                  />\n                  {!formik.errors.email && formik.values.email !== '' ? (\n                    <InputCorrect name=\"Email is correct\"/>\n                  ) : (\n                    null\n                  )}\n                  <InputError name=\"email\" />\n                </Label>\n                <Label>\n                  <Input\n                 className={!formik.errors.password && formik.values.password !== '' ? 'success' : formik.errors.password && formik.values.password !== '' ? 'error' : 'default'}\n                    name=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Password\"\n                    autoComplete=\"off\"\n                  />\n                  <IconShow onClick={togglePassword}>\n                    {showPassword ? <BiHide /> : <BiShow />}\n                  </IconShow>\n                  {!formik.errors.password && formik.values.password !== '' ? (\n                    <InputCorrect name=\"Password is correct\"/>\n                  ) : (\n                    null\n                  )}\n                  <InputError name=\"password\" />\n                </Label>\n                {isPending ? (\n                  <Spinner />\n                ) : (\n                  <BtnFormSubmit disabled={formik.errors.email || formik.errors.password} type=\"submit\">Login</BtnFormSubmit>\n                )}\n              </FormAuth>\n            )}\n          </Formik>\n          <TextLink>\n            <span>Don't have an account? </span>\n            <LinkToRegister to=\"/register\">Register</LinkToRegister>\n          </TextLink>\n        </Wrapper>\n      </Container>\n    </Section>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from \"components/LoginForm\";\n\nconst LoginPage = () => {\n  return (\n    <div>\n    <LoginForm/>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"names":["navigate","useNavigate","dispatch","useDispatch","isPending","useAuth","useState","showPassword","setShowPassword","togglePassword","Container","transition","Slide","initialValues","email","password","validationSchema","validationLogin","onSubmit","values","actions","logIn","then","res","payload","code","replace","resetForm","notifyError","formik","className","errors","name","type","placeholder","autoComplete","onClick","Spinner","disabled","to"],"sourceRoot":""}