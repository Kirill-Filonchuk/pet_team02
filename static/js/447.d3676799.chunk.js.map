{"version":3,"file":"static/js/447.d3676799.chunk.js","mappings":"iTAgHA,EAtFkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAiBC,EAAAA,EAAAA,KAAjBD,aACR,GAAwCE,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAOMC,EAAiB,WACrBD,GAAiBD,EAClB,EAqBD,OACE,SAAC,KAAD,WACE,SAACG,EAAA,EAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAgBC,WAAYC,EAAAA,MAC5B,SAAC,KAAD,qBACA,SAAC,KAAD,CACEC,cAnCY,CACpBC,MAAO,GACPC,SAAU,IAkCFC,iBAAkBC,EAAAA,GAClBC,SA7BW,SAACC,EAAQC,GAC5B,IAAQN,EAAoBK,EAApBL,MAAOC,EAAaI,EAAbJ,SACfb,GACEmB,EAAAA,EAAAA,IAAM,CACJP,MAAOA,EACPC,SAAUA,KAEZO,MAAK,SAAAC,GACoB,MAArBA,EAAIC,QAAQC,OACdzB,EAAS,QAAS,CAAE0B,SAAS,IAC7BN,EAAQO,aAEU,wCAAhBJ,EAAIC,UACNI,EAAAA,EAAAA,GAAY,kBAEM,wCAAhBL,EAAIC,UACNI,EAAAA,EAAAA,GAAY,4BAEf,GACF,EAOO,SAKG,kBACC,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,OACLC,YAAY,QACZC,aAAa,SAEf,SAAC,KAAD,CAAYH,KAAK,cAEnB,UAAC,KAAD,YACE,SAAC,KAAD,CACEA,KAAK,WACLC,KAAMvB,EAAe,OAAS,WAC9BwB,YAAY,WACZC,aAAa,SAEf,SAAC,KAAD,CAAUC,QAASxB,EAAnB,SACGF,GAAe,SAAC,MAAD,KAAa,SAAC,MAAD,OAE/B,SAAC,KAAD,CAAYsB,KAAK,gBAElBzB,GACC,SAAC8B,EAAA,EAAD,KAEA,SAAC,KAAD,CAAeJ,KAAK,SAApB,qBA1BL,KA+BH,UAAC,KAAD,YACE,uDACA,SAAC,KAAD,CAAgBK,GAAG,YAAnB,+BAMX,ECtGD,EANkB,WAChB,OACE,SAAC,EAAD,GAEH,C","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { ToastContainer, Slide } from 'react-toastify';\nimport { logIn } from 'redux/auth/operations';\nimport useAuth from '../../hooks/useAuth/useAuth';\nimport { validationLogin, InputError } from 'components/FormValidation';\nimport { notifyError } from 'components/Helpers/Toastify';\nimport Spinner from 'components/Helpers/Spinner';\nimport { BiShow, BiHide } from 'react-icons/bi';\n\nimport Container from 'components/Container';\nimport {\n  Section,\n  Title,\n  FormAuth,\n  Label,\n  Input,\n  IconShow,\n  BtnFormSubmit,\n  TextLink,\n  LinkToRegister,\n  Wrapper,\n} from './LoginForm.styled';\n\nconst LoginForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { isRefreshing } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const togglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n  const handleSubmit = (values, actions) => {\n    const { email, password } = values;\n    dispatch(\n      logIn({\n        email: email,\n        password: password,\n      })\n    ).then(res => {\n      if (res.payload.code === 200) {\n        navigate('/user', { replace: true });\n        actions.resetForm();\n      }\n      if (res.payload === 'Request failed with status code 409') {\n        notifyError('User not found');\n      }\n      if (res.payload === 'Request failed with status code 401') {\n        notifyError('Invalid email or password');\n      }\n    });\n  };\n  return (\n    <Section>\n      <Container>\n        <Wrapper>\n          <ToastContainer transition={Slide} />\n          <Title>Login</Title>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={validationLogin}\n            onSubmit={handleSubmit}\n          >\n            {() => (\n              <FormAuth>\n                <Label>\n                  <Input\n                    name=\"email\"\n                    type=\"text\"\n                    placeholder=\"Email\"\n                    autoComplete=\"off\"\n                  />\n                  <InputError name=\"email\" />\n                </Label>\n                <Label>\n                  <Input\n                    name=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Password\"\n                    autoComplete=\"off\"\n                  />\n                  <IconShow onClick={togglePassword}>\n                    {showPassword ? <BiHide /> : <BiShow />}\n                  </IconShow>\n                  <InputError name=\"password\" />\n                </Label>\n                {isRefreshing ? (\n                  <Spinner />\n                ) : (\n                  <BtnFormSubmit type=\"submit\">Login</BtnFormSubmit>\n                )}\n              </FormAuth>\n            )}\n          </Formik>\n          <TextLink>\n            <span>Don't have an account? </span>\n            <LinkToRegister to=\"/register\">Register</LinkToRegister>\n          </TextLink>\n        </Wrapper>\n      </Container>\n    </Section>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from \"components/LoginForm\";\n\nconst LoginPage = () => {\n  return (\n    <LoginForm/>\n  );\n};\n\nexport default LoginPage;\n"],"names":["navigate","useNavigate","dispatch","useDispatch","isRefreshing","useAuth","useState","showPassword","setShowPassword","togglePassword","Container","transition","Slide","initialValues","email","password","validationSchema","validationLogin","onSubmit","values","actions","logIn","then","res","payload","code","replace","resetForm","notifyError","name","type","placeholder","autoComplete","onClick","Spinner","to"],"sourceRoot":""}