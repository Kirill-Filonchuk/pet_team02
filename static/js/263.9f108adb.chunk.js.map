{"version":3,"file":"static/js/263.9f108adb.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { BtnFormSubmit } from 'components/LoginForm/LoginForm.styled';\nimport { NavLink } from 'react-router-dom';\nimport { theme } from '../../../src/theme';\n\nconst ButtonBack = styled(BtnFormSubmit)`\n  width: 100%;\n  margin-top: 0;\n  margin-bottom: 40px;\n  color: ${theme.colors.black};\n  background-color: transparent;\n`;\n\nconst ButtonRegister = styled(BtnFormSubmit)`\n  margin-top: 4px;\n  margin-bottom: 12px;\n`;\n\nconst LinkToLogin = styled(NavLink)`\n  color: ${theme.colors.blueLinks};\n  text-decoration: underline;\n`;\n\nexport { ButtonBack, LinkToLogin, ButtonRegister };\n","import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport { register } from 'redux/auth/operations';\nimport Spinner from 'components/Helpers/Spinner';\nimport { ToastContainer, Slide } from 'react-toastify';\nimport { notifyError } from 'components/Helpers/Toastify/Toastify';\nimport useAuth from 'hooks/useAuth/useAuth';\nimport { BiShow, BiHide } from 'react-icons/bi';\nimport Container from 'components/Container';\nimport {\n  validationRegisterStepOne,\n  validationRegisterStepTwo,\n  InputError,\n  InputCorrect,\n} from 'components/FormValidation';\n\nimport {\n  Title,\n  Label,\n  Input,\n  IconShow,\n  Section,\n  Wrapper,\n  BtnFormSubmit,\n  TextLink,\n  FormAuth,\n} from 'components/LoginForm/LoginForm.styled';\nimport { ButtonBack, LinkToLogin, ButtonRegister } from './RegisterForm.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirmPassword: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nconst RegisterForm = () => {\n  const [step, setStep] = useState(1);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { isPending } = useAuth();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = (values, actions) => {\n    const { email, password, confirmPassword, name, city, phone } = values;\n    if (password === confirmPassword) {\n      dispatch(\n        register({\n          email: email,\n          password: password,\n          name: name,\n          city: city,\n          phone: phone,\n        })\n      ).then(res => {\n        if (res.payload.code === 201) {\n          navigate('/user', { replace: true });\n          actions.resetForm();\n        }\n        if (res.payload === 'Request failed with status code 409') {\n          notifyError(`User with email ${email} already exist`);\n        }\n      });\n    }\n  };\n\n  const togglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const toggleConfirmPassword = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  const nextStep = () => setStep(step + 1);\n  const prevStep = () => setStep(step - 1);\n\n  return (\n    <Section>\n      <Container>\n        <Wrapper>\n          <ToastContainer transition={Slide} />\n          <Title>Registration</Title>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={\n              step === 1 ? validationRegisterStepOne : validationRegisterStepTwo\n            }\n            onSubmit={handleSubmit}\n          >\n            {({ errors, touched, values }) => (\n              <FormAuth>\n                {step === 1 && (\n                  <>\n                    <Label>\n                      <Input\n                        className={\n                          !errors.email && values.email !== ''\n                            ? 'success'\n                            : errors.email && values.email !== ''\n                            ? 'error'\n                            : 'default'\n                        }\n                        autoComplete=\"off\"\n                        type=\"text\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                      />\n                      {!errors.email && values.email !== '' ? (\n                        <InputCorrect name=\"Email is correct\" />\n                      ) : null}\n\n                      <InputError name=\"email\" />\n                    </Label>\n\n                    <Label>\n                      <Input\n                        className={\n                          !errors.password && values.password !== ''\n                            ? 'success'\n                            : errors.password && values.password !== ''\n                            ? 'error'\n                            : 'default'\n                        }\n                        type={showPassword ? 'text' : 'password'}\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"off\"\n                      />\n                      <IconShow onClick={togglePassword}>\n                        {showPassword ? (\n                          <BiHide size={24} />\n                        ) : (\n                          <BiShow size={24} />\n                        )}\n                      </IconShow>\n                      {!errors.password && values.password !== '' ? (\n                        <InputCorrect name=\"Password is correct\" />\n                      ) : null}\n                      <InputError name=\"password\" />\n                    </Label>\n\n                    <Label>\n                      <Input\n                        className={\n                          !errors.confirmPassword &&\n                          values.confirmPassword !== ''\n                            ? 'success'\n                            : errors.confirmPassword &&\n                              values.confirmPassword !== ''\n                            ? 'error'\n                            : 'default'\n                        }\n                        type={showConfirmPassword ? 'text' : 'password'}\n                        name=\"confirmPassword\"\n                        placeholder=\"Confirm Password\"\n                        autoComplete=\"off\"\n                      />\n                      <IconShow onClick={toggleConfirmPassword}>\n                        {showConfirmPassword ? (\n                          <BiHide size={24} />\n                        ) : (\n                          <BiShow size={24} />\n                        )}\n                      </IconShow>\n                      {!errors.confirmPassword &&\n                      values.confirmPassword !== '' ? (\n                        <InputCorrect name=\"Password confirmed\" />\n                      ) : null}\n                      <InputError name=\"confirmPassword\" />\n                    </Label>\n                    {isPending ? (\n                      <Spinner />\n                    ) : (\n                      <BtnFormSubmit\n                        disabled={\n                          errors.email ||\n                          errors.password ||\n                          errors.confirmPassword\n                        }\n                        type=\"submit\"\n                        onClick={\n                          values.email !== '' &&\n                          values.password !== '' &&\n                          values.confirmPassword !== ''\n                            ? nextStep\n                            : null\n                        }\n                      >\n                        Next\n                      </BtnFormSubmit>\n                    )}\n                  </>\n                )}\n\n                {step === 2 && (\n                  <>\n                    <Label>\n                      <Input\n                        className={\n                          !errors.name && values.name !== ''\n                            ? 'success'\n                            : errors.name && values.name !== ''\n                            ? 'error'\n                            : 'default'\n                        }\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        autoComplete=\"off\"\n                      />\n                      {!errors.name && values.name !== '' ? (\n                        <InputCorrect name=\"Name is correct\" />\n                      ) : null}\n                      <InputError name=\"name\" />\n                    </Label>\n                    <Label>\n                      <Input\n                        className={\n                          !errors.city && values.city !== ''\n                            ? 'success'\n                            : errors.city && values.city !== ''\n                            ? 'error'\n                            : 'default'\n                        }\n                        type=\"text\"\n                        name=\"city\"\n                        placeholder=\"City, region (*value is optional)\"\n                        autoComplete=\"off\"\n                      />\n                      {!errors.city && values.city !== '' ? (\n                        <InputCorrect name=\"Location is correct\" />\n                      ) : null}\n                      <InputError name=\"city\" />\n                    </Label>\n                    <Label>\n                      <Input\n                        className={\n                          !errors.phone && values.phone !== ''\n                            ? 'success'\n                            : errors.phone && values.phone !== ''\n                            ? 'error'\n                            : 'default'\n                        }\n                        type=\"text\"\n                        name=\"phone\"\n                        placeholder=\"Mobile phone (*value is optional)\"\n                        autoComplete=\"off\"\n                      />\n                      {!errors.phone && values.phone !== '' ? (\n                        <InputCorrect name=\"Phone is correct\" />\n                      ) : null}\n                      <InputError name=\"phone\" />\n                    </Label>\n                    {isPending ? (\n                      <Spinner />\n                    ) : (\n                      <>\n                        <ButtonRegister\n                          disabled={errors.name || errors.city || errors.phone}\n                          type=\"submit\"\n                        >\n                          Register\n                        </ButtonRegister>\n                        <ButtonBack type=\"button\" onClick={prevStep}>\n                          Back\n                        </ButtonBack>\n                      </>\n                    )}\n                  </>\n                )}\n              </FormAuth>\n            )}\n          </Formik>\n          <TextLink>\n            <span>Already have an account? </span>\n            <LinkToLogin to=\"/login\">Login</LinkToLogin>\n          </TextLink>\n        </Wrapper>\n      </Container>\n    </Section>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from \"components/RegisterForm\";\n\nconst RegisterPage = () => {\n  return (\n    <RegisterForm/>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["ButtonBack","styled","BtnFormSubmit","theme","ButtonRegister","LinkToLogin","NavLink","initialValues","email","password","confirmPassword","name","city","phone","useState","step","setStep","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","isPending","useAuth","dispatch","useDispatch","navigate","useNavigate","togglePassword","toggleConfirmPassword","nextStep","prevStep","Container","transition","Slide","validationSchema","validationRegisterStepOne","validationRegisterStepTwo","onSubmit","values","actions","register","then","res","payload","code","replace","resetForm","notifyError","errors","touched","className","autoComplete","type","placeholder","onClick","size","Spinner","disabled","to"],"sourceRoot":""}