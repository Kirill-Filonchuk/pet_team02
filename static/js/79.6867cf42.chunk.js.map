{"version":3,"file":"static/js/79.6867cf42.chunk.js","mappings":"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","sources":["components/FormValidation/FormValidation.styled.js","components/FormValidation/FormValidation.jsx","components/LoginForm/LoginForm.styled.js","components/ContainerForm/Container.styled.js","components/ContainerForm/Container.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { theme } from '../../theme';\n\nconst Error = styled.div`\n  position: absolute;\n  width: 100%;\n  text-align: center;\n  left: 50%;\n  top: 45px;\n  transform: translateX(-50%);\n  font-size: 10px;\n  color: red;\n  ${theme.mq.tablet} {\n    font-size: ${theme.fontSizes[1]+\"px\"};\n    top: 62px;\n  }\n  ${theme.mq.desktop} {\n    top: 60px;\n    font-size: ${theme.fontSizes[2]+\"px\"};\n  }\n`;\n\nexport { Error };\n","import * as yup from 'yup';\nimport { ErrorMessage } from 'formik';\nimport { Error } from './FormValidation.styled';\nconst emailValid =\n  /^[^-._]{1}[A-Za-z0-9._-]{1,}@[^-._]{1}[A-Za-z0-9.-]{0,}\\.[A-Za-z]{2,4}$/;\nconst nameValid = /^[^\\s][a-zA-zа-яіїєА-ЯІЇЄ .'-]*$/;\nconst passwordValid = /^[^ ]+$/;\nconst phoneValid = /^[+]{1}[0-9]{12}$/;\nconst locationValid = /^[a-zA-Zа-яіїєА-ЯІЇЄ .'-]+[,][ ][a-zA-Zа-яіїєА-ЯІЇЄ .'-]+$/;\nconst validationLogin = yup.object().shape({\n  email: yup\n    .string()\n    .required('Email field is required')\n    .matches(emailValid, \"Email must contain '@', example: user@mail.com\")\n    .max(70, 'Maximum 70 characters')\n    .min(10, \"Minimum 10 characters\")\n    .email(),\n  password: yup\n    .string()\n    .matches(passwordValid, 'Please enter min 7 characters and max 32')\n    .max(32, 'Please enter 32 characters or less')\n    .min(7, 'Enter 7 or more characters')\n    .required('Password field is required'),\n});\nconst validationRegisterStepOne = yup.object().shape({\n  email: yup\n    .string()\n    .required('Email field is required')\n    .matches(emailValid, \"Email must contain '@', example: user@mail.com\")\n    .max(70, 'Maximum 70 characters')\n    .min(10, \"Minimum 10 characters\")\n    .email(),\n  password: yup\n    .string()\n    .matches(passwordValid, 'Please enter min 7 characters and max 32')\n    .max(32, 'Please enter 32 characters or less')\n    .min(7, 'Enter 7 or more characters')\n    .required('Password field is required'),\n  confirmPassword: yup.string().when('password', {\n    is: val => (val && val.length > 0 ? true : false),\n    then: () =>\n      yup\n        .string()\n        .oneOf([yup.ref('password')], ' Please confirm your password')\n        .required('Confirm field is required'),\n  }),\n});\n\nconst validationRegisterStepTwo = yup.object().shape({\n  name: yup\n    .string()\n    .required('Name field is required')\n    .matches(nameValid, 'Name field can contain any letters')\n    .max(24, \"Max 24 characters\")\n    .min(1, \"Min 1 character\"),\n  city: yup\n    .string()\n    .matches(\n      locationValid,\n      'Location field must contain two words separated by a comma'\n    )\n    .min(5, \"Min 5 characters\")\n    .max(35, \"Max 35 characters\"),\n  phone: yup\n    .string()\n    .matches(\n      phoneValid,\n      'The phone number must be in the format +380123456789'\n    ),\n});\n\nconst InputError = ({ name }) => {\n  return (\n    <Error>\n      <ErrorMessage\n        name={name}\n        render={message => <p style={{ margin: 0 }}>{message}</p>}\n      />\n    </Error>\n  );\n};\nexport {\n  validationLogin,\n  InputError,\n  validationRegisterStepOne,\n  validationRegisterStepTwo,\n};\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { theme } from '../../theme';\n\nconst Title = styled.h2`\n  text-align: center;\n  color: ${theme.colors.black};\n  font-family: ${theme.fonts.manrope};\n  font-size: ${theme.fontSizes[5] + `px`};\n  line-height: ${theme.lineHeights[4]};\n  font-weight: ${theme.fontWeights.bold};\n  letter-spacing: 0.04em;\n  margin-bottom: 40px;\n  ${theme.mq.tablet} {\n  font-size: ${theme.fontSizes[7] + `px`};\n  line-height: ${theme.lineHeights[3]};\n  font-weight: ${theme.fontWeights.medium};\n  }\n`;\nconst Wrapper = styled.div`\n  padding: 0 20px;\n  ${theme.mq.tablet} {\n    padding: 60px 80px;\n    margin: 150px 80px 0 80px;\n    border-radius: ${theme.radii.normal};\n    background-color: ${theme.colors.white};\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\n  }\n  ${theme.mq.desktop} {\n    margin: 140px 330px 0 330px;\n  }\n`;\n\nconst FormAuth = styled(Form)`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Label = styled.label`\n  position: relative;\n  margin-bottom: 24px;\n  ${theme.mq.tablet} {\n    margin-bottom: 40px;\n  }\n`;\nconst Input = styled(Field)`\n  padding: 0 14px;\n  min-width: 100%;\n  background-color: ${theme.colors.background};\n  height: 40px;\n  border: ${theme.borders.normal} ${theme.colors.borderActive};\n  font-size: ${theme.fontSizes[1]+'px'};\n  line-height: ${theme.lineHeights[3]};\n  font-family: ${theme.fonts.manrope};\n  font-weight: ${theme.fontWeights.normal};\n  color: ${theme.colors.grey};\n  border-radius: ${theme.radii.normal};\n  ${theme.mq.tablet}{\n    height: 52px;\n    font-size: ${theme.fontSizes[2]+'px'};\n    line-height: ${theme.lineHeights[4]};\n    padding: 0 22px;\n  }\n  ${theme.mq.desktop} {\n    padding: 0 32px;\n    font-size: ${theme.fontSizes[3]+'px'};\n    line-height: ${theme.lineHeights[5]};\n  }\n`;\n\nconst IconShow = styled.span`\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 10px;\n  color: ${theme.colors.grey};\n  ${theme.mq.tablet} {\n    width: 35px;\n    height: 35px;\n  }\n  &>svg {\n    width: 24px;\n    height: 24px;\n    ${theme.mq.tablet} {\n    width: 35px;\n    height: 35px;\n  }\n  }\n  \n`;\n\nconst BtnFormSubmit = styled.button`\n  display: flex;\n  height: 44px;\n  border-radius: ${theme.radii.normal};\n  margin-top: 16px;\n  font-size: ${theme.fontSizes[4] + `px`};\n  line-height: ${theme.lineHeights[2]};\n  margin-bottom: 40px;\n  color: ${theme.colors.white};\n  font-family: ${theme.fonts.manrope};\n  font-weight: ${theme.fontWeights.medium};\n  justify-content: center;\n  align-items: center;\n  border: ${theme.borders.medium} ${theme.colors.borderActive};\n  background-color: ${theme.colors.accent};\n  ${theme.mq.tablet} {\n    margin-top: 0;\n  }\n`;\n\nconst TextLink = styled.p`\n  color: ${theme.colors.grey};\n  font-family: ${theme.fonts.manrope};\n  font-weight: ${theme.fontWeights.normal};\n  text-align: center;\n  font-size: ${theme.fontSizes[0] + `px`};\n  line-height: ${theme.lineHeights[2]};\n  letter-spacing: 0.04em;\n  margin: 0;\n`;\n\nconst LinkToRegister = styled(Link)`\n  color: ${theme.colors.blueLinks};\n  text-decoration: underline;\n`;\nexport {\n  Wrapper,\n  Title,\n  FormAuth,\n  Label,\n  Input,\n  IconShow,\n  BtnFormSubmit,\n  TextLink,\n  LinkToRegister,\n};\n","import styled from 'styled-components';\n\nconst MainContainer = styled.div`\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n\n  @media screen and (min-width: 320px) {\n    width: 320px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 1280px;\n  }\n`;\n\nexport default MainContainer;\n","import MainContainer from \"./Container.styled\"\n\nconst Container = ({children}) => {\n    return <MainContainer>{children}</MainContainer>\n}\n\nexport default Container;","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { logIn } from 'redux/auth/operations';\nimport { Formik } from 'formik';\nimport { validationLogin, InputError } from 'components/FormValidation';\n\nimport Container from '../ContainerForm';\nimport { BiShow, BiHide } from 'react-icons/bi';\n\nimport {\n  Wrapper,\n  Title,\n  FormAuth,\n  Label,\n  Input,\n  IconShow,\n  BtnFormSubmit,\n  TextLink,\n  LinkToRegister,\n} from './LoginForm.styled';\n\nconst LoginForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n  const togglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n  const handleSubmit = (values, actions) => {\n    const { email, password } = values;\n    dispatch(\n      logIn({\n        email: email,\n        password: password,\n      })\n    ).then(res => {\n      if (res.payload.status === 'success') {\n        navigate('/user', { replace: true });\n      }\n    });\n    actions.resetForm();\n  };\n  return (\n    <Container>\n      <Wrapper>\n        <Title>Login</Title>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationLogin}\n          onSubmit={handleSubmit}\n        >\n          {() => (\n            <FormAuth>\n              <Label>\n                <Input\n                  name=\"email\"\n                  type=\"text\"\n                  placeholder=\"Email\"\n                  autoComplete=\"off\"\n                />\n                <InputError name=\"email\" />\n              </Label>\n              <Label>\n                <Input\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  placeholder=\"Password\"\n                  autoComplete=\"off\"\n                />\n                <IconShow onClick={togglePassword}>\n                  {showPassword ? <BiHide size={24} /> : <BiShow size={24} />}\n                </IconShow>\n                <InputError name=\"password\" />\n              </Label>\n              <BtnFormSubmit type=\"submit\">Login</BtnFormSubmit>\n            </FormAuth>\n          )}\n        </Formik>\n        <TextLink>\n          <span>Don't have an account? </span>\n          <LinkToRegister to=\"/register\">Register</LinkToRegister>\n        </TextLink>\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from \"components/LoginForm\";\n\nconst LoginPage = () => {\n  return (\n    <LoginForm/>\n  );\n};\n\nexport default LoginPage;\n"],"names":["Error","styled","theme","emailValid","passwordValid","validationLogin","yup","shape","email","required","matches","max","min","password","validationRegisterStepOne","confirmPassword","when","is","val","length","then","oneOf","validationRegisterStepTwo","name","city","phone","InputError","render","message","style","margin","Title","Wrapper","FormAuth","Form","Label","Input","Field","IconShow","BtnFormSubmit","TextLink","LinkToRegister","Link","children","navigate","useNavigate","dispatch","useDispatch","useState","showPassword","setShowPassword","togglePassword","initialValues","validationSchema","onSubmit","values","actions","logIn","res","payload","status","replace","resetForm","type","placeholder","autoComplete","onClick","size","to"],"sourceRoot":""}