{"version":3,"file":"static/js/787.1c40b6da.chunk.js","mappings":"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","sources":["components/RegisterForm/NavigationForm/NavigationForm.styled.js","components/RegisterForm/NavigationForm/NavigationForm.jsx","components/RegisterForm/MultiForm/MultiForm.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { theme } from '../../../theme';\nimport { BtnFormSubmit } from 'components/LoginForm/LoginForm.styled';\n\nconst ButtonBack = styled(BtnFormSubmit)`\n  width: 100%;\n  margin: 12px 0 40px 0;\n  color: ${theme.colors.black};\n  background-color: transparent;\n`;\n\nconst LinkToLogin = styled(NavLink)`\n  color: ${theme.colors.blueLinks};\n  text-decoration: underline;\n`;\n\nexport { ButtonBack, LinkToLogin };\n","import Spinner from 'components/Helpers/Spinner';\nimport useAuth from '../../../hooks/useAuth/useAuth';\nimport { ButtonBack, LinkToLogin } from './NavigationForm.styled';\nimport { BtnFormSubmit, TextLink } from 'components/LoginForm/LoginForm.styled';\n\nconst FormNavigation = props => {\n  const { isRefreshing } = useAuth();\n  return (\n    <>\n      {isRefreshing ? (\n        <Spinner />\n      ) : (\n        <BtnFormSubmit\n          style={{ marginTop: 2, marginBottom: props.isLastStep ? 0 : 40 }}\n          type=\"submit\"\n          name=\"register\"\n        >\n          {props.isLastStep ? 'Register' : 'Next'}\n        </BtnFormSubmit>\n      )}\n\n      {props.hasPrevious && !isRefreshing ? (\n        <ButtonBack type=\"button\" name=\"back\" onClick={props.onBackClick}>\n          Back\n        </ButtonBack>\n      ) : null}\n\n      <TextLink>\n        <span>Already have an account? </span>\n        <LinkToLogin to=\"/login\">Login</LinkToLogin>\n      </TextLink>\n    </>\n  );\n};\n\nexport default FormNavigation;\n","import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport FormNavigation from '../NavigationForm';\n\nimport { FormAuth } from 'components/LoginForm/LoginForm.styled';\n\nconst MultiStepForm = ({ children, initialValues, onSubmit }) => {\n  const [stepNumber, setStepNumber] = useState(0);\n  const steps = React.Children.toArray(children);\n\n  const [snapshot, setSnapshot] = useState(initialValues);\n\n  const step = steps[stepNumber];\n  const totalSteps = steps.length;\n  const isLastStep = stepNumber === totalSteps - 1;\n\n  const next = values => {\n    setSnapshot(values);\n    setStepNumber(stepNumber + 1);\n  };\n\n  const previous = values => {\n    setSnapshot(values);\n    setStepNumber(stepNumber - 1);\n  };\n\n  const handleSubmit = async (values, actions) => {\n    if (step.props.onSubmit) {\n      await step.props.onSubmit(values);\n    }\n\n    if (isLastStep) {\n      return onSubmit(values, actions);\n    } else {\n      actions.setTouched({});\n      next(values);\n    }\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={snapshot}\n        onSubmit={handleSubmit}\n        validationSchema={step.props.validationSchema}\n      >\n        {formik => (\n          <FormAuth onSubmit={formik.handleSubmit}>\n            {step}\n            <FormNavigation\n              isLastStep={isLastStep}\n              hasPrevious={stepNumber > 0}\n              onBackClick={() => previous(formik.values)}\n            />\n          </FormAuth>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nconst FormStep = ({ stepName = '', children }) => children;\n\nexport { MultiStepForm, FormStep };\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport { register } from 'redux/auth/operations';\nimport {\n  validationRegisterStepOne,\n  validationRegisterStepTwo,\n  InputError,\n} from 'components/FormValidation';\nimport { BiShow, BiHide } from 'react-icons/bi';\nimport { ToastContainer, Slide } from 'react-toastify';\nimport { notifyError } from 'components/Helpers/Toastify/Toastify';\n\nimport { MultiStepForm, FormStep } from './MultiForm';\nimport Container from 'components/Container';\nimport {\n  Title,\n  Label,\n  Input,\n  IconShow,\n  Section,\n  Wrapper,\n} from 'components/LoginForm/LoginForm.styled';\n\nconst RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const initialValues = {\n    email: '',\n    password: '',\n    confirmPassword: '',\n    name: '',\n    city: '',\n    phone: '',\n  };\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = (values, actions) => {\n    const { email, password, confirmPassword, name, city, phone } = values;\n    if (password === confirmPassword) {\n      dispatch(\n        register({\n          email: email,\n          password: password,\n          name: name,\n          city: city,\n          phone: phone,\n        })\n      ).then(res => {\n        console.log(res);\n        if (res.payload.code === 201) {\n          navigate('/user', { replace: true });\n          actions.resetForm();\n        }\n        if (res.payload === 'Request failed with status code 409') {\n          notifyError(`User with email ${email} already exist`);\n        }\n      });\n    }\n  };\n\n  const togglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const toggleConfirmPassword = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  return (\n    <Section>\n      <Container>\n        <Wrapper>\n          <ToastContainer transition={Slide} />\n          <Title>Registration</Title>\n          <MultiStepForm initialValues={initialValues} onSubmit={handleSubmit}>\n            <FormStep\n              stepName=\"UserMain\"\n              validationSchema={validationRegisterStepOne}\n            >\n              <Label>\n                <Input\n                  autoComplete=\"off\"\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                />\n                <InputError name=\"email\" />\n              </Label>\n              <Label>\n                <Input\n                  type={showPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  autoComplete=\"off\"\n                />\n                <IconShow onClick={togglePassword}>\n                  {showPassword ? <BiHide size={24} /> : <BiShow size={24} />}\n                </IconShow>\n                <InputError name=\"password\" />\n              </Label>\n              <Label>\n                <Input\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  name=\"confirmPassword\"\n                  placeholder=\"Confirm Password\"\n                  autoComplete=\"off\"\n                />\n                <IconShow onClick={toggleConfirmPassword}>\n                  {showConfirmPassword ? (\n                    <BiHide size={24} />\n                  ) : (\n                    <BiShow size={24} />\n                  )}\n                </IconShow>\n                <InputError name=\"confirmPassword\" />\n              </Label>\n            </FormStep>\n\n            <FormStep\n              stepName=\"UserLocation\"\n              validationSchema={validationRegisterStepTwo}\n            >\n              <Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  autoComplete=\"off\"\n                />\n                <InputError name=\"name\" />\n              </Label>\n              <Label>\n                <Input\n                  type=\"text\"\n                  name=\"city\"\n                  placeholder=\"City, region\"\n                  autoComplete=\"off\"\n                />\n                <InputError name=\"city\" />\n              </Label>\n              <Label>\n                <Input\n                  type=\"text\"\n                  name=\"phone\"\n                  placeholder=\"Mobile phone\"\n                  autoComplete=\"off\"\n                />\n                <InputError name=\"phone\" />\n              </Label>\n            </FormStep>\n          </MultiStepForm>\n        </Wrapper>\n      </Container>\n    </Section>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from \"components/RegisterForm\";\n\nconst RegisterPage = () => {\n  return (\n    <RegisterForm/>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["ButtonBack","styled","BtnFormSubmit","theme","LinkToLogin","NavLink","props","isRefreshing","useAuth","Spinner","style","marginTop","marginBottom","isLastStep","type","name","hasPrevious","onClick","onBackClick","to","MultiStepForm","children","initialValues","onSubmit","useState","stepNumber","setStepNumber","steps","React","snapshot","setSnapshot","step","totalSteps","length","next","values","handleSubmit","actions","setTouched","validationSchema","formik","FormStep","stepName","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","dispatch","useDispatch","navigate","useNavigate","Container","transition","Slide","email","password","confirmPassword","city","phone","register","then","res","console","log","payload","code","replace","resetForm","notifyError","validationRegisterStepOne","autoComplete","placeholder","size","validationRegisterStepTwo"],"sourceRoot":""}